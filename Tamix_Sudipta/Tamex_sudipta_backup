#include "FINGER_Detector_System.h"

using namespace std;

//---------------------------------------------------------------

FINGER_Detector_System::FINGER_Detector_System(){

    //calibration enabled?
    get_Calib_type();
    cal_count = 0;
    
//     Calibration_Done = false;
// 
//     FINGER_Calibration = new FINGER_Calibrator(CALIBRATE);
   

    // different codes for FINGER MBS words
    add = 2781;
    aa = 170;
    six_eight = 104;
    six_f = 6;
    trailer_code = 187;
    error_code = 238;
    tamex_identifier = 52;
    
    iterator = new int[100];
    ch_ID_edge = new int[33];
    for(int i = 0;i < 100;++i) iterator[i] = 0;

    tamex_iter = 0;

    leading_hits = new int*[100];
    trailing_hits = new int*[100];

    coarse_T = new double[100];
    fine_T = new double[100];
    ch_ID = new unsigned int[100];

    edge_coarse = new double*[100];
    edge_fine = new double*[100];
   // ch_ID_edge = new unsigned int*[100];
    for(int o = 0;o < 100;++o){
        edge_coarse[o] = new double[100];
        edge_fine[o] = new double[100];
        //ch_ID_edge[o] = new unsigned int[100];
        leading_hits[o] = new int[100];
        trailing_hits[o] = new int[100];
        
         tamexdata.ChannelNo=0;
    tamexdata.CoarseTime=0;
    tamexdata.FineTime=0;
    tamexdata.LeadingEdge=false;
    tamexdata.TrailingEdge=false;
 //   tamexdata.NHits=0;

    tamexheader.PreTriggerWindow=0;
    tamexheader.PostTriggerWindow=0;
    tamexheader.SFPID=0;
    tamexheader.TamexID=0;
    tamexheader.TDCHeader=0x00;
    tamexheader.TDCTrailer=0x00;
    }
}

//---------------------------------------------------------------

FINGER_Detector_System::~FINGER_Detector_System(){
    for(int i = 0;i < 100;++i){
        delete[] edge_coarse[i];
        delete[] edge_fine[i];
      //  delete[] ch_ID_edge[i];
        delete[] leading_hits[i];
        delete[] trailing_hits[i];
    }
    delete[] edge_coarse;
    delete[] edge_fine;
   // delete[] ch_ID_edge;

    delete[] coarse_T;
    delete[] fine_T;
    delete[] ch_ID;

    delete FINGER_Calibration;
}

//---------------------------------------------------------------

void FINGER_Detector_System::get_Event_data(Raw_Event* RAW){
    RAW->set_DATA_FINGER(iterator,edge_coarse,edge_fine,ch_ID_edge,coarse_T,fine_T,tamex_iter); 
}

//---------------------------------------------------------------

void FINGER_Detector_System::Process_MBS(int* pdata){
      UInt_t  PreTriggerWin, PostTriggerWin, tmp, tmp1, TamexChannel, HitCounts;
//Suditpa code implement//
    while(true){
//    /* //this->pdata = pdata;*/
     data = *pdata;
            tamexheader.PreTriggerWindow = (data & 0xffff0000) >> 16;
            tamexheader.PostTriggerWindow = (data & 0xffff);
//   /*  //reset old iterator array and old TAMEX data
// //     for(int i = 0;i < tamex_iter;++i) iterator[i] = 0;
// //     reset_edges();
// //     tamex_end = false;
// //     tamex_iter = 0;*/
            for(int i=0;i<ChNumPhy;i++){
            fCoarse[i]=0;
            tamexdata.NHits[i]=0;
            isfired[i]=false;
}
        for(int ix=0 ; ix< 100; ix++)
           {
           *pdata++;
           data=*pdata;
           tmp = (data & 0xfff00000) >> 20;
           //    cout << tmp << endl;
           if( ((data &  0xfff00000) >> 20) != 0xadd) {break;}
           }
    
    //loop over the complete TAMEX data of the subevent
//  /*   while(!tamex_end){
//         Process_TAMEX();
//         if(!tamex_end) tamex_iter++;
//         this->pdata++;
//     }*/
    
    //true -> do "online" calibration and exit program
//    /* if(CALIBRATE) calibrate_ONLINE();
//     //false -> do normal "offline" calibration
//     else calibrate_OFFLINE();*/
// // }
for(int NumTamexModules=0;NumTamexModules<3;NumTamexModules++){


tamexdata.ChannelNo=0;
tamexdata.FineTime=0;
tamexdata.CoarseTime=0;


//cout<< std::hex  << *pdata <<endl;

if(NumTamexModules> 0){*pdata++;}
//cout<<"I expect header-- NumTamexModule is "<<NumTamexModules<<endl; 
//cout<< std::hex  << *pdata <<endl;


data = *pdata;

 //            if(((data & 0xff) != 0x34))
 //            {cout << "wrong channel header" << endl; break;}

            if(((data & 0xff) != 0x34))
             {cout << "wrong channel header" << endl; 
//                  if (data ==0xbad00bad){cout<<"Major error; bad bad; re-initialize tamex"<<endl;}
             break;}
             tamexheader.SFPID = (data & 0xf000) >> 12;
             tamexheader.TamexID  = (data & 0xf0000) >> 16;
             tamexheader.UnusedChannelId  = (data & 0xff000000) >> 24;

            // Size of TDC data in words --(0x00000034)/4 -2

             *pdata++; data = *pdata;

//             tmp = data & 0xff;
             tmp=data;

             tamexheader.SizeOfDataInWords = (tmp/4)-2;

             *pdata++; data = *pdata;
             tamexheader.TDCHeader = (data & 0xff000000) >> 24;

 //            cout << "tamexheader.SizeOfDataInWords:"<< tamexheader.SizeOfDataInWords<<endl;

 for (int i =0; i< tamexheader.SizeOfDataInWords ; i++)
              {
                 *pdata++; data = *pdata;
                if((data & 0xe0000000)>> 29 == 4)
              {
                if(((data & 0x800) >> 11) == 1)
               {
               tamexdata.ChannelNo = (data & 0x1fc00000) >> 22;
               ch_ID_edge = tamexdata.ChannelNo;
//      isfired[tamexdata.ChannelNo]=true;
               value = (data & 0x3ff000) >> 12;
               tamexdata.FineTime=value;
               fine_T = tamexdata.FineTime;
               
               value = (data & 0x7ff);
               tamexdata.CoarseTime=value;
               coarse_T = tamexdata.CoarseTime
               
               tamexdata.NHits[tamexdata.ChannelNo+tamexheader.TamexID*33]++; //bu yok
                iterator =  tamexdata.NHits[tamexdata.ChannelNo+tamexheader.TamexID*33]++;
                
                tamexdata.LeadingEdge = true;
                tamexdata.TrailingEdge= false;
//                fCoarse[tamexdata.ChannelNo] =  tamexdata.CoarseTime + tamexdata.FineTime/500.0*5.0;
//              fCoarse[tamexdata.ChannelNo] =  tamexdata.FineTime/500.0*5.0;
                
                if(tamexdata.NHits[tamexdata.ChannelNo+tamexheader.TamexID*33]==1){/// bunu sor
                fCoarse[tamexdata.ChannelNo+tamexheader.TamexID*33] = tamexdata.CoarseTime;
                fFine[tamexdata.ChannelNo+tamexheader.TamexID*33]   = tamexdata.FineTime;
                isfired[tamexdata.ChannelNo+tamexheader.TamexID*33]=true;
                }
            }
            
            else{
                  cout <<"AHHHHHA!"<< endl;
               tamexdata.ChannelNo = (data & 0x1fc00000) >> 22;
               value = (data & 0x3ff000) >> 12;
               tamexdata.FineTime=value;
               value = (data & 0x7ff);
               tamexdata.CoarseTime=value;
               tamexdata.LeadingEdge = false;
               tamexdata.TrailingEdge=true;
                        }
                    } //End If
              } //End for // Time Information here
               *pdata++; data = *pdata;


                   tamexheader.TDCTrailer = (data & 0xff000000) >> 24;
                }
               tamex_iterator++;
    }
}
//---------------------------------------------------------------

////void FINGER_Detector_System::Process_TAMEX(){

//     /*//reset iterator[tamex_iter]
//     iterator[tamex_iter] = 0;
//     no_edges[tamex_iter] = false;
//     
//     written = false;
// 
//     //check for trigger window (beginning of TAMEX MBS)
//     if(tamex_iter == 0){
//         TRIGGER_WINDOW* window = (TRIGGER_WINDOW*) pdata;
//         Pre_Trigger_Window = window->PRE_TRIGG;
//         Post_Trigger_Window = window->POST_TRIGG;
//         
//         //move to next word
//         pdata++;
//         //skip padding in stream
//         skip_padding();
//     }
//     //get tamex_id, sfp_id and trigger type
//     TAMEX_CHANNEL_HEADER* head = (TAMEX_CHANNEL_HEADER*) pdata;
//    // printf(" head 0x%08x\n", (unsigned int) pdata); 
//     //check if end of TAMEX MBS reached
//     bool ongoing = (head->identify == tamex_identifier) && (head->identify_2 == 0) && (head->sfp_id == 1 || head->sfp_id == 0);
//     
//     if(!ongoing){
//         tamex_end = true;
//         return;
//     }
//     if(tamex_iter > 0){
//         if(head->Tamex_id <= tamex_id[tamex_iter-1]){
//             tamex_end = true;
//             return;
//         }
//     }
// 
//     sfp_id[tamex_iter] = head->sfp_id;
//     trigger_type[tamex_iter] = head->trigger_t;
//     tamex_id[tamex_iter] = head->Tamex_id;
//       //next word
//     pdata++;
//     //get amount of fired tdcs (without last trailing words)
//     TAMEX_FIRED* fire = (TAMEX_FIRED*) pdata;
//     am_fired[tamex_iter] = (fire->am_fired)/4 - 2;
//     
//     if(am_fired[tamex_iter] < 0){
//         cerr << "NEGATIVE TAMEX FIRED AMOUNT ENCOUNTERED!" << endl;
//         exit(0);
//     }
// 
//    
//     //next word
//     pdata++;
//     //begin of data header
//     TAMEX_BEGIN* begin = (TAMEX_BEGIN*) pdata;
//     if(begin->aa != aa){
//         cerr << "error in TAMEX format! 0xaa...... word not found after fired amount!" << endl;
//         cerr << "TAMEX WORD: " << hex << *pdata << endl;
//         exit(0);
//     }
// 
//     //next word
//     pdata++;
//     //get trigger 
//     get_trigger();
//     //move on to leading and trailing edges
//     if(am_fired[tamex_iter] > 3) get_edges();
//     else no_edges[tamex_iter] = true;
//     
//     //check errors
//     //if(!no_edges[tamex_iter]) pdata++;
//     check_error();
//     //checking trailer
//     check_trailer();
// }*/

//---------------------------------------------------------------

// void FINGER_Detector_System::skip_padding(){
//     //skip padding by checking words for add
//     bool still_padding = true;
//     while(still_padding){
//         PADDING* padding = (PADDING*) pdata;
//         if(padding->add == add) pdata++;
//         else still_padding = false;
//     }
// }

//---------------------------------------------------------------

// void FINGER_Detector_System::get_trigger(){
//     //check place holder in stream
//     PLACE_HOLDER* hold = (PLACE_HOLDER*) pdata;
//     
//     if(hold->six_eight != six_f){
//         cerr << dec << hold->six_eight << endl;
//         cerr << "PLACE_HOLDER error (trigger) in TAMEX!" << endl;
//         exit(0);
//     }
// 
//     //next word 
//     pdata++;
// 
//     //extract data
//     TAMEX_DATA* data = (TAMEX_DATA*) pdata;
//     coarse_T[tamex_iter] = (double) data->coarse_T;
//     fine_T[tamex_iter] = (double) data->fine_T;
//     ch_ID[tamex_iter] = data->ch_ID;
// 
//     //next word
//     pdata++;
// }

//---------------------------------------------------------------

// void FINGER_Detector_System::reset_edges(){
//     for(int i = 0;i < 4;++i){
//         for(int j = 0;j < 100;++j){
//             leading_hits[i][j] = 0;
//             trailing_hits[i][j] = 0;
//             edge_coarse[i][j] = 131313;
//             edge_fine[i][j] = 131313;
//             ch_ID_edge[i][j] = 131313;
//         }
//     }
// }


//---------------------------------------------------------------

// void FINGER_Detector_System::get_edges(){
//     //set iterator[tamex_iter] of edges to 0
//     iterator[tamex_iter] = 0;
// 
//     //loop over remaining words (getting leading and trailing edge data)
//     written = false;
// 
//     while(no_error_reached()){
//         //check place holder in stream
//         PLACE_HOLDER* hold = (PLACE_HOLDER*) pdata;
// 
//         if(hold->six_eight != six_f && written){
//             //cerr << "***Multiple single channel fire***" << endl;
//             pdata++;
//             continue;
//         }
//         else if(hold->six_eight == six_f) written = false;
// 
//         if(hold->six_eight != six_f){
//             cerr << dec << hold->six_eight << endl;
//             cerr << "PLACE_HOLDER error (edges) in TAMEX!" << endl;
//             //exit(0);
//            // return(0);
//             break;
//         }
// 
//         //next word 
//         pdata++;
//        
//         //extract data
//         TAMEX_DATA* data = (TAMEX_DATA*) pdata;
//             
//         edge_coarse[tamex_iter][iterator[tamex_iter]] = (double) data->coarse_T;
//         edge_fine[tamex_iter][iterator[tamex_iter]] = (double) data->fine_T;
//         ch_ID_edge[tamex_iter][iterator[tamex_iter]] = data->ch_ID;
//         lead_arr[tamex_iter][iterator[tamex_iter]] = 1 - (data->ch_ID % 2);
//  
//         //cout << "tamex_iter " << tamex_iter << " iterator[tamex_iter] " << iterator[tamex_iter] << "  edge_coarse[tamex_iter] " <<  edge_coarse[tamex_iter][iterator[tamex_iter]]<< " ch_ID_edge " << ch_ID_edge[tamex_iter][iterator[tamex_iter]] << endl;
//   
// //         cout << "debug edges" << endl;
// //         cout << dec << tamex_iter << " " << data->ch_ID << " " << endl;
//         
//         //trailing edge reached
//         iterator[tamex_iter]++;
// 
//         written = true;
// 
//         //next word
//         pdata++;
//     }
// }

//---------------------------------------------------------------

// bool FINGER_Detector_System::no_error_reached(){
//     TAMEX_ERROR* error = (TAMEX_ERROR*) pdata;
//     return error->error != error_code;
// }
// 
// //---------------------------------------------------------------
// 
// void FINGER_Detector_System::check_error(){
//     //next word
//     //pdata++;
// 
//     TAMEX_ERROR* error = (TAMEX_ERROR*) pdata;
//     
//     if(error->error != error_code){
//         cerr << "wrong error header in TAMEX @ word " << hex << *pdata << endl;
//         exit(0);
//     }
//     if(error->err_code != 0){
//         cerr << "Error (not known) in TAMEX occured -> TAMEX WORD: " << hex << *pdata << endl;
//         exit(0);
//     }
// }
// 
// //---------------------------------------------------------------
// 
// void FINGER_Detector_System::check_trailer(){
//     //next word
//     pdata++;
// 
//     TAMEX_TRAILER* trailer = (TAMEX_TRAILER*) pdata;
// 
//     if(trailer->trailer != trailer_code){
//         cerr << "Unknown TAMEX trailer format!" << endl;
//         exit(0);
//     }
//     //else Trailer_Reached = true;
// 
// }
// 
// //---------------------------------------------------------------
// 
// void FINGER_Detector_System::calibrate_ONLINE(){
// 
//     //send data to ROOT histograms in Calibrator object
//     FINGER_Calibration->get_data(edge_fine,ch_ID_edge,tamex_iter,iterator);
//     double max_count = 30000.;
//     cal_count++;
//     if(cal_count % 1000 == 0){
//         cout << dec << "=========================\n";
//         cout << cal_count << " " << cal_count/max_count*100. << "%" << endl;
//         cout << dec << "=========================" << endl;
//     }
//     Calibration_Done = false;
// 
//     //if critical amount of calibration data reached
//     //=> do ONLINE calibration and quit program
//     if(cal_count > max_count){
//         FINGER_Calibration->ONLINE_CALIBRATION();
//         Calibration_Done = true;
//     }
// }
// 
// //---------------------------------------------------------------
// 
// void FINGER_Detector_System::calibrate_OFFLINE(){
//     int channel_ID_tmp = 0;
//     for(int i = 0;i < 4;++i){
//         for(int j = 0;j < iterator[i];++j){
//             channel_ID_tmp = (int) ch_ID_edge[i][j];
//             if(edge_coarse[i][j] != 131313) edge_fine[i][j] = FINGER_Calibration->get_Calibration_val(edge_fine[i][j],i,channel_ID_tmp);
//             else edge_fine[i][j] = 131313;
//         }
//     }
// }
    
//---------------------------------------------------------------

int* FINGER_Detector_System::get_pdata(){return pdata;}

//---------------------------------------------------------------

//bool FINGER_Detector_System::calibration_done(){return Calibration_Done;}

//---------------------------------------------------------------

// void FINGER_Detector_System::get_Calib_type(){
//     ifstream data("Configuration_Files/FINGER_CALIB_FILE.txt");
//     if(data.fail()){
//         cerr << "Could not find Calibration type file for FINGER" << endl;
//         exit(0);
//     }
//     string line;
//     const char* format = "%s %d";
//     char s[100];
//     int val;
//     CALIBRATE = false;
//     bool FORCE = false;
// 
//     while(data.good()){
//         getline(data,line,'\n');
//         if(line[0] == '#') continue;
//         sscanf(line.c_str(),format,&s,&val);
//         if(string(s) == string("ONLINE")) CALIBRATE = (val == 1);
//         if(string(s) == string("FORCE")) FORCE = (val == 1);
//     }
//     data.close();
// 
//     //only FORCE possible, if ONLINE active
//     FORCE = (CALIBRATE) ? FORCE : false;
// 
//     //if FORCE == false -> rewrite config file to OFFLINE mode
//     if(!FORCE){
//         ofstream out("Configuration_Files/FINGER_CALIB_FILE.txt");
//         out << "#FINGER calibration type file" << endl;
//         out << "#The file will be changed to OFFLINE after its been read" << endl;
//         out << "#-> to force multiple ONLINE calibrations, set FORCE to 1" << endl;
//         out << "#ONLINE Calibration and FORCE (1 = yes, 0 = no)" << endl;
//         out << "ONLINE\t\t0" << endl;
//         out << "FORCE\t\t0" << endl;
//         out.close(); 
//     }
//     else{
//         cout << endl;
//         cout << "######################################################################" << endl;
//         cout << "!!! ONLINE ANALYSIS IN FORCED MODE" << endl;
//         cout << "!!! TO DISABLE, CHECK FINGER_CALIB_FILE IN Configuration_Files" << endl;
//         cout << "######################################################################" << endl;
//         cout << endl;
//     }
// 
// }

//---------------------------------------------------------------
